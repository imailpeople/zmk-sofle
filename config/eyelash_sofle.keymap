#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 50  // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener {
    warp {
        layers = <0>;
        input-processors = <&zip_xy_scaler 3 1>;
        process-next;
    };

    precision {
        layers = <3>;
        input-processors = <&zip_xy_scaler 1 2>;
    };
};

/*
   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

/ {
    behaviors {
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    Navi_Paste_Copy: Navi_Paste_Copy {
        compatible = "zmk,behavior-tap-dance";
        label = "NAVI_PASTE_COPY";
        #binding-cells = <0>;
        bindings = <&lt 4 C_AC_PASTE>, <&kp C_AC_COPY>;

        tapping-term-ms = <200>;
    };

    Sh_Del_Else_NPC: Sh_Del_Else_NPC {
        compatible = "zmk,behavior-mod-morph";
        label = "SH_DEL_ELSE_NPC";
        bindings = <&Navi_Paste_Copy>, <&kp DELETE>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT)>;
    };

    Sh_ShDel_Else_LAlt: Sh_ShDel_Else_LAlt {
        compatible = "zmk,behavior-mod-morph";
        label = "SH_SHDEL_ELSE_LALT";
        bindings = <&mt LEFT_ALT MINUS>, <&kp LS(DELETE)>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT)>;
    };

    Esc_CWord: Esc_CWord {
        compatible = "zmk,behavior-tap-dance";
        label = "ESC_CWORD";
        #binding-cells = <0>;
        tapping-term-ms = <225>;
        bindings = <&kp ESCAPE>, <&caps_word>;
    };

    Ent_NWord: Ent_NWord {
        compatible = "zmk,behavior-tap-dance";
        label = "ENT_NWORD";
        #binding-cells = <0>;
        tapping-term-ms = <225>;
        bindings = <&kp ENTER>, <&num_word 3>;
    };

    kp_Esc_CWord: kp_Esc_CWord {
        compatible = "zmk,behavior-hold-tap";
        label = "KP_ESC_CWORD";
        bindings = <&kp>, <&Esc_CWord>;

        #binding-cells = <2>;
        tapping-term-ms = <225>;
        quick-tap-ms = <200>;
        flavor = "hold-preferred";
        hold-while-undecided;
    };

    mo_Ent_NWord: mo_Ent_NWord {
        compatible = "zmk,behavior-hold-tap";
        label = "MO_ENT_NWORD";
        bindings = <&mo>, <&Ent_NWord>;

        #binding-cells = <2>;
        tapping-term-ms = <225>;
        quick-tap-ms = <200>;
        flavor = "hold-preferred";
        hold-while-undecided;
    };

    Tab_F1: Tab_F1 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAB_F1";
        #binding-cells = <0>;
        tapping-term-ms = <225>;
        bindings = <&kp TAB>, <&kp F1>;
    };

    mo_Tab_F1: mo_Tab_F1 {
        compatible = "zmk,behavior-hold-tap";
        label = "MO_TAB_F1";
        bindings = <&mo>, <&Tab_F1>;

        #binding-cells = <2>;
        tapping-term-ms = <225>;
        quick-tap-ms = <200>;
        flavor = "hold-preferred";
        hold-while-undecided;
    };

    combos {
        compatible = "zmk,combos";

        Combo_Ctrl_Period {
            bindings = <&Sticky_Num>;
            key-positions = <28 39>;
            layers = <1>;
            timeout-ms = <200>;
        };
    };

    macros {
        Sticky_Num: wcpn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(PERIOD) &sl 4>;
            label = "WCPN";
            wait-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8     &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U      &kp I      &kp O            &kp P       &kp BSLH
&kp CAPS    &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K      &kp L            &kp SEMI    &kp APOS
&kp LSHFT   &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA  &kp DOT          &kp FSLH    &kp ENTER
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 1   &kp SPACE    &kp ENTER        &kp SPACE  &kp ENTER  &mo 2      &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
